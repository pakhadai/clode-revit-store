"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot
–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ —Ä–æ–∑—Å–∏–ª–æ–∫
"""

import os
import json
from typing import Optional, List, Dict
import httpx
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

class TelegramBotService:
    """
    –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Telegram Bot API
    """

    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.bot_token or self.bot_token == "your_telegram_bot_token":
            print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π. –°–µ—Ä–≤—ñ—Å –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è.")
            self.bot_token = None
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"

    async def _make_request(self, method: str, data: Dict, files: Optional[Dict] = None) -> Optional[Dict]:
        """
        –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Telegram API.
        –ü—ñ–¥—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø—Ä–∞–≤–∫—É —è–∫ JSON-–¥–∞–Ω–∏—Ö, —Ç–∞–∫ —ñ —Ñ–∞–π–ª—ñ–≤.
        """
        if not self.bot_token:
            print(f"üì¶ TELEGRAM API CALL (DRY RUN): –ú–µ—Ç–æ–¥={method}, –î–∞–Ω—ñ={data}, –§–∞–π–ª–∏={'–¢–∞–∫' if files else '–ù—ñ'}")
            return {"ok": True, "result": "Dry run success"}

        # –î–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –±–µ–∑ —Ñ–∞–π–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ json, –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –∑ —Ñ–∞–π–ª–∞–º–∏ - data.
        # –¶–µ –¥–æ–∑–≤–æ–ª—è—î httpx –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Content-Type.
        is_multipart = files is not None
        request_kwargs = {
            "timeout": 60.0 if is_multipart else 15.0,
            "files": files,
            "data": data if is_multipart else None,
            "json": data if not is_multipart else None,
        }

        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(f"{self.api_url}/{method}", **request_kwargs)
                response.raise_for_status()
                return response.json()
            except httpx.HTTPStatusError as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Telegram API: {e.response.status_code} - {e.response.text}")
            except httpx.RequestError as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Telegram API: {e}")
            except Exception as e:
                print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ Telegram API: {e}")
        return None

    async def send_message(
            self,
            telegram_id: int,
            message: str,
            parse_mode: str = "HTML",
            reply_markup: Optional[Dict] = None
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
        """
        payload = {
            "chat_id": telegram_id,
            "text": message,
            "parse_mode": parse_mode
        }
        if reply_markup:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ json.dumps –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            payload["reply_markup"] = json.dumps(reply_markup)

        response = await self._make_request("sendMessage", data=payload)
        return response and response.get("ok", False)

    async def send_photo(
            self,
            telegram_id: int,
            photo_path_or_url: str,
            caption: Optional[str] = None,
            parse_mode: str = "HTML"
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∞–±–æ URL.
        """
        payload = {
            "chat_id": telegram_id,
            "caption": caption,
            "parse_mode": parse_mode
        }
        files = None

        if os.path.exists(photo_path_or_url):
            try:
                photo_file = open(photo_path_or_url, 'rb')
                files = {'photo': photo_file}
                response = await self._make_request("sendPhoto", data=payload, files=files)
                photo_file.close()
                return response and response.get("ok", False)
            except IOError as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª —Ñ–æ—Ç–æ: {e}")
                return False
        else:
            payload['photo'] = photo_path_or_url
            response = await self._make_request("sendPhoto", data=payload)
            return response and response.get("ok", False)

    async def send_document(
        self,
        telegram_id: int,
        file_path: str,
        caption: Optional[str] = None,
        parse_mode: str = "HTML"
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É.
        """
        payload = {
            "chat_id": telegram_id,
            "caption": caption,
            "parse_mode": parse_mode
        }

        try:
            with open(file_path, "rb") as doc_file:
                files_to_send = {"document": (os.path.basename(file_path), doc_file)}
                response = await self._make_request("sendDocument", data=payload, files=files_to_send)
            return response and response.get("ok", False)
        except IOError as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return False

    async def send_archive_message(
        self,
        telegram_id: int,
        product: "Product",
        file_path: str,
        language: str = "uk"
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞—Ä—Ö—ñ–≤–æ–º, —Ñ–æ—Ç–æ —Ç–∞ –æ–ø–∏—Å–æ–º.
        """
        caption = (
            f"<b>{product.get_title(language)}</b>\n\n"
            f"<i>{product.get_description(language)}</i>\n\n"
            f"<b>–¢–∏–ø:</b> {product.product_type}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {product.category}"
        )

        try:
            if product.preview_images:
                preview_path = os.path.join("/app", product.preview_images[0].lstrip('/'))
                if os.path.exists(preview_path):
                    await self.send_photo(telegram_id, photo_path_or_url=preview_path)

            success = await self.send_document(
                telegram_id,
                file_path=file_path,
                caption=caption
            )
            return success
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö—ñ–≤—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {e}")
            return False

    async def send_invoice(
            self,
            telegram_id: int,
            title: str,
            description: str,
            payload: str,
            provider_token: str,
            currency: str,
            prices: List[Dict]
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Telegram Payments.
        """
        payload_data = {
            "chat_id": telegram_id,
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": provider_token,
            "currency": currency,
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ json.dumps –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ü—ñ–Ω
            "prices": json.dumps(prices)
        }
        response = await self._make_request("sendInvoice", data=payload_data)
        return response and response.get("ok", False)

    async def broadcast(
            self,
            telegram_ids: List[int],
            message: str,
            parse_mode: str = "HTML"
    ) -> Dict:
        """
        –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
        """
        sent = 0
        failed = 0
        for telegram_id in telegram_ids:
            if await self.send_message(telegram_id, message, parse_mode):
                sent += 1
            else:
                failed += 1
        return {"total": len(telegram_ids), "sent": sent, "failed": failed}

    async def set_webhook(self, webhook_url: str) -> bool:
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook –¥–ª—è –±–æ—Ç–∞.
        """
        payload = {"url": webhook_url}
        response = await self._make_request("setWebhook", data=payload)
        if response and response.get("ok"):
            print(f"‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {webhook_url}")
            return True
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook.")
        return False

    async def delete_webhook(self) -> bool:
        """
        –í–∏–¥–∞–ª–∏—Ç–∏ webhook.
        """
        response = await self._make_request("deleteWebhook", data={})
        if response and response.get("ok"):
            print("‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            return True
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook.")
        return False

    async def get_me(self) -> Optional[Dict]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞.
        """
        response = await self._make_request("getMe", data={})
        if response and response.get("ok"):
            return response.get("result")
        return None

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
bot_service = TelegramBotService()

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
__all__ = ['bot_service', 'TelegramBotService']
