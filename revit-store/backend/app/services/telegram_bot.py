"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot
–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ —Ä–æ–∑—Å–∏–ª–æ–∫
"""

import os
from typing import Optional, List, Dict
import httpx
from dotenv import load_dotenv

load_dotenv()


class TelegramBotService:
    """
    –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Telegram Bot API
    """

    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.bot_token or self.bot_token == "your_telegram_bot_token":
            print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –∞–±–æ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º. –°–µ—Ä–≤—ñ—Å –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è.")
            self.bot_token = None
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"

    async def _make_request(self, method: str, data: Dict) -> Optional[Dict]:
        """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Telegram API."""
        if not self.bot_token:
            print(f"üì¶ TELEGRAM API CALL (DRY RUN): –ú–µ—Ç–æ–¥={method}, –î–∞–Ω—ñ={data}")
            return {"ok": True, "result": "Dry run success"}

        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(f"{self.api_url}/{method}", json=data, timeout=10.0)
                response.raise_for_status()
                return response.json()
            except httpx.HTTPStatusError as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Telegram API: {e.response.status_code} - {e.response.text}")
            except httpx.RequestError as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Telegram API: {e}")
            except Exception as e:
                print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ Telegram API: {e}")
        return None

    async def send_message(
            self,
            telegram_id: int,
            message: str,
            parse_mode: str = "HTML",
            reply_markup: Optional[Dict] = None
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
        """
        payload = {
            "chat_id": telegram_id,
            "text": message,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup

        response = await self._make_request("sendMessage", payload)
        return response and response.get("ok", False)

    async def send_photo(
            self,
            telegram_id: int,
            photo_url: str,
            caption: Optional[str] = None,
            parse_mode: str = "HTML"
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
        """
        payload = {
            "chat_id": telegram_id,
            "photo": photo_url,
            "caption": caption,
            "parse_mode": parse_mode
        }
        response = await self._make_request("sendPhoto", payload)
        return response and response.get("ok", False)

    async def send_document(
            self,
            telegram_id: int,
            document_url: str,
            caption: Optional[str] = None,
            parse_mode: str = "HTML"
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
        """
        payload = {
            "chat_id": telegram_id,
            "document": document_url,
            "caption": caption,
            "parse_mode": parse_mode
        }
        response = await self._make_request("sendDocument", payload)
        return response and response.get("ok", False)

    async def send_archive_message(
            self,
            telegram_id: int,
            product: "Product",  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç—É
            file_path: str,  # –ê–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–∞ –¥–∏—Å–∫—É
            language: str = "uk"
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞—Ä—Ö—ñ–≤–æ–º, —Ñ–æ—Ç–æ —Ç–∞ –æ–ø–∏—Å–æ–º.
        """
        if not self.bot_token:
            print(
                f"üì¶ TELEGRAM BOT (DRY RUN): –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö—ñ–≤—É '{product.get_title(language)}' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}")
            return True

        # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        caption = (
            f"<b>{product.get_title(language)}</b>\n\n"
            f"<i>{product.get_description(language)}</i>\n\n"
            f"<b>–¢–∏–ø:</b> {product.product_type}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {product.category}"
        )

        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ–∞–π–ª –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        try:
            with open(file_path, "rb") as archive_file:
                files = {"document": (os.path.basename(file_path), archive_file)}

                params = {
                    "chat_id": telegram_id,
                    "caption": caption,
                    "parse_mode": "HTML"
                }

                # –Ø–∫—â–æ —î –ø—Ä–µ–≤'—é, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
                if product.preview_images:
                    params["photo"] = product.preview_images[0]
                    # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ –æ–∫—Ä–µ–º–æ, –∞ –ø–æ—Ç—ñ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    await self.send_photo(telegram_id, product.preview_images[0], caption=caption)
                    await self.send_document(telegram_id, document_url=None,
                                             files={"document": (os.path.basename(file_path), archive_file)})
                    return True

                # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                async with httpx.AsyncClient() as client:
                    response = await client.post(f"{self.api_url}/sendDocument", params=params, files=files,
                                                 timeout=60.0)

                response_data = response.json()
                return response_data.get("ok", False)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö—ñ–≤—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {e}")
            return False


    async def send_invoice(
            self,
            telegram_id: int,
            title: str,
            description: str,
            payload: str,
            provider_token: str,
            currency: str,
            prices: List[Dict]
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Telegram Payments.
        """
        payload_data = {
            "chat_id": telegram_id,
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": provider_token,
            "currency": currency,
            "prices": prices
        }
        response = await self._make_request("sendInvoice", payload_data)
        return response and response.get("ok", False)

    async def broadcast(
            self,
            telegram_ids: List[int],
            message: str,
            parse_mode: str = "HTML"
    ) -> Dict:
        """
        –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
        """
        sent = 0
        failed = 0

        for telegram_id in telegram_ids:
            if await self.send_message(telegram_id, message, parse_mode):
                sent += 1
            else:
                failed += 1

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Å–∏–ª–∫–∏: –£—Å–ø—ñ—à–Ω–æ - {sent}, –ù–µ–≤–¥–∞–ª–æ - {failed}")
        return {
            "total": len(telegram_ids),
            "sent": sent,
            "failed": failed
        }

    async def set_webhook(self, webhook_url: str) -> bool:
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook –¥–ª—è –±–æ—Ç–∞.
        """
        payload = {"url": webhook_url}
        response = await self._make_request("setWebhook", payload)
        if response and response.get("ok"):
            print(f"‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {webhook_url}")
            return True
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook.")
        return False

    async def delete_webhook(self) -> bool:
        """
        –í–∏–¥–∞–ª–∏—Ç–∏ webhook.
        """
        response = await self._make_request("deleteWebhook", {})
        if response and response.get("ok"):
            print("‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            return True
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook.")
        return False

    async def get_me(self) -> Optional[Dict]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞.
        """
        response = await self._make_request("getMe", {})
        if response and response.get("ok"):
            return response.get("result")
        return None

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
bot_service = TelegramBotService()

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
__all__ = ['bot_service', 'TelegramBotService']