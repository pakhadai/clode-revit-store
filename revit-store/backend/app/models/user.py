"""
–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ OhMyRevit
"""

from datetime import datetime
from sqlalchemy import Column, Integer, String, DateTime, BigInteger, Boolean, Text, JSON, ForeignKey
from sqlalchemy.orm import relationship
from app.database import Base


class User(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    __tablename__ = "users"

    # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False, index=True)
    username = Column(String(100), nullable=True)
    first_name = Column(String(100), nullable=True)
    last_name = Column(String(100), nullable=True)
    photo_url = Column(Text, nullable=True)  # URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ Telegram

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    language = Column(String(10), default="en")  # en, ua, ru
    theme = Column(String(10), default="light")  # light, dark
    notifications_enabled = Column(Boolean, default=True)

    # –ë–∞–ª–∞–Ω—Å —Ç–∞ —Å—Ç–∞—Ç—É—Å
    balance = Column(Integer, default=0)  # –ë–æ–Ω—É—Å–∏
    vip_level = Column(Integer, default=0)  # 0: none, 1: bronze, 2: silver, 3: gold, 4: diamond
    total_spent = Column(Integer, default=0)  # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫ (–≤ —Ü–µ–Ω—Ç–∞—Ö)

    # –†–æ–ª—ñ
    is_creator = Column(Boolean, default=False)  # –ß–∏ —î —Ç–≤–æ—Ä—Ü–µ–º
    is_admin = Column(Boolean, default=False)  # –ß–∏ —î –∞–¥–º—ñ–Ω–æ–º
    is_blocked = Column(Boolean, default=False)  # –ß–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
    referral_code = Column(String(20), unique=True, nullable=True)
    referred_by_id = Column(Integer, nullable=True)  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–∏–π –∑–∞–ø—Ä–æ—Å–∏–≤
    referral_earnings = Column(Integer, default=0)  # –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤

    # –©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
    daily_bonuses = relationship("DailyBonus", back_populates="user")
    wheel_spins = relationship("WheelSpin", back_populates="user")
    #bonus_history = relationship("BonusHistory", back_populates="user")
    daily_streak = Column(Integer, default=0)  # –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç—Ä—ñ–∫
    last_daily_bonus = Column(DateTime, nullable=True)  # –û—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
    free_spins_today = Column(Integer, default=1)  # –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞

    # –ë–µ–∑–ø–µ–∫–∞
    pin_code = Column(String(100), nullable=True)  # –•–µ—à–æ–≤–∞–Ω–∏–π PIN-–∫–æ–¥
    two_factor_enabled = Column(Boolean, default=False)

    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    email = Column(String(255), nullable=True)  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π email
    creator_bio = Column(Text, nullable=True)  # –û–ø–∏—Å –¥–ª—è —Ç–≤–æ—Ä—Ü—ñ–≤
    creator_verified = Column(Boolean, default=False)  # –ß–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π —Ç–≤–æ—Ä–µ—Ü—å

    # –ú–µ—Ç–∞–¥–∞–Ω—ñ
    settings = Column(JSON, default={})  # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_login = Column(DateTime, default=datetime.utcnow)

    # –í—ñ–¥–Ω–æ—Å–∏–Ω–∏
    orders = relationship("Order", back_populates="user", cascade="all, delete-orphan")
    subscriptions = relationship("Subscription", back_populates="user", cascade="all, delete-orphan")
    products = relationship("Product", back_populates="creator")  # –ü—Ä–æ–¥—É–∫—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    favorites = relationship("Product", secondary="user_favorites", back_populates="favorited_by")
    cart_items = relationship("CartItem", back_populates="user", cascade="all, delete-orphan")
    #notifications = relationship("Notification", back_populates="user", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<User {self.username or self.first_name} (TG: {self.telegram_id})>"

    def get_full_name(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        parts = []
        if self.first_name:
            parts.append(self.first_name)
        if self.last_name:
            parts.append(self.last_name)
        return " ".join(parts) if parts else self.username or f"User_{self.telegram_id}"

    def get_vip_level_name(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É VIP —Ä—ñ–≤–Ω—è"""
        levels = {
            0: "None",
            1: "Bronze ü•â",
            2: "Silver ü•à",
            3: "Gold ü•á",
            4: "Diamond üíé"
        }
        return levels.get(self.vip_level, "None")

    def get_cashback_percent(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ç–æ–∫ –∫–µ—à–±–µ–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ VIP —Ä—ñ–≤–Ω—è"""
        cashback = {
            0: 0,
            1: 3,  # Bronze
            2: 5,  # Silver
            3: 7,  # Gold
            4: 10  # Diamond
        }
        return cashback.get(self.vip_level, 0)

    def update_vip_level(self):
        """–û–Ω–æ–≤–∏—Ç–∏ VIP —Ä—ñ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ total_spent"""
        # –°—É–º–∏ –≤ –¥–æ–ª–∞—Ä–∞—Ö (–∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ü–µ–Ω—Ç–∏ –≤ –¥–æ–ª–∞—Ä–∏)
        spent_usd = self.total_spent / 100

        if spent_usd >= 5000:
            self.vip_level = 4  # Diamond
        elif spent_usd >= 1000:
            self.vip_level = 3  # Gold
        elif spent_usd >= 500:
            self.vip_level = 2  # Silver
        elif spent_usd >= 100:
            self.vip_level = 1  # Bronze
        else:
            self.vip_level = 0  # None

    def has_active_subscription(self, db: "Session") -> bool:  # <--- –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –º–µ—Ç–æ–¥
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞."""
        for sub in self.subscriptions:
            if sub.is_valid():
                return True
        return False

class CreatorApplication(Base):
    __tablename__ = "creator_applications"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False, unique=True)
    portfolio_url = Column(Text, nullable=True)
    about_me = Column(Text, nullable=False)
    status = Column(String(50), default='pending')  # pending, approved, rejected
    review_notes = Column(Text, nullable=True) # –ö–æ–º–µ–Ω—Ç–∞—Ä –∞–¥–º—ñ–Ω–∞
    created_at = Column(DateTime, default=datetime.utcnow)

    user = relationship("User", back_populates="creator_applications")


# –¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω—É –º–æ–¥–µ–ª—å User
User.creator_applications = relationship("CreatorApplication", back_populates="user", cascade="all, delete-orphan")