"""
–ú–æ–¥–µ–ª—ñ –¥–ª—è –ö–æ–ª–µ–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""
from datetime import datetime
from sqlalchemy import Column, Integer, String, DateTime, Text, ForeignKey, Table, Boolean
from sqlalchemy.orm import relationship
from app.database import Base

# –¢–∞–±–ª–∏—Ü—è –∑–≤'—è–∑–∫—É many-to-many –º—ñ–∂ –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏ —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
collection_products = Table(
    'collection_products',
    Base.metadata,
    Column('collection_id', Integer, ForeignKey('collections.id', ondelete="CASCADE"), primary_key=True),
    Column('product_id', Integer, ForeignKey('products.id', ondelete="CASCADE"), primary_key=True)
)

class Collection(Base):
    """–ú–æ–¥–µ–ª—å –ö–æ–ª–µ–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    __tablename__ = "collections"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.id', ondelete="CASCADE"), nullable=False)
    name = Column(String(100), nullable=False)
    icon = Column(String(10), default="ü§ç")
    description = Column(Text, nullable=True)
    is_public = Column(Boolean, default=False) # –î–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏

    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # –ó–≤'—è–∑–∫–∏
    user = relationship("User", back_populates="collections")
    products = relationship("Product", secondary=collection_products, back_populates="collections")

    def __repr__(self):
        return f"<Collection {self.id}: {self.name}>"