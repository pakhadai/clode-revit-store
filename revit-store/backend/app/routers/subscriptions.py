"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏
"""

from fastapi import APIRouter, HTTPException, Depends, Query, Request
from sqlalchemy.orm import Session
from typing import Dict, List, Optional
from datetime import datetime, timedelta

from app.database import get_db
from app.models.user import User
from app.models.subscription import Subscription, SubscriptionHistory
from app.routers.auth import get_current_user_from_token
from app.services.payment_service import PaymentService

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
router = APIRouter(
    prefix="/api/subscriptions",
    tags=["Subscriptions"]
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞—Ç—ñ–∂–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
payment_service = PaymentService()


# ====== –ü–õ–ê–ù–ò –ü–Ü–î–ü–ò–°–û–ö ======

@router.get("/plans")
async def get_subscription_plans(
        language: str = Query("en", description="–ú–æ–≤–∞: en, ua, ru")
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–ª–∞–Ω–∏ –ø—ñ–¥–ø–∏—Å–æ–∫

    Args:
        language: –ú–æ–≤–∞ –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó

    Returns:
        –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω—ñ–≤ –∑ –ø–µ—Ä–µ–≤–∞–≥–∞–º–∏
    """
    plans = {
        "monthly": {
            "id": "monthly",
            "name": {
                "en": "Monthly Premium",
                "ua": "–ú—ñ—Å—è—á–Ω–∞ Premium",
                "ru": "–ú–µ—Å—è—á–Ω–∞—è Premium"
            },
            "description": {
                "en": "Get full access for 30 days",
                "ua": "–û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω—ñ–≤",
                "ru": "–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π"
            },
            "price": 500,  # –í —Ü–µ–Ω—Ç–∞—Ö
            "price_display": "$5.00",
            "currency": "USD",
            "duration_days": 30,
            "benefits": {
                "en": [
                    "Access to new premium archives",
                    "+2 wheel spins daily",
                    "5% cashback in bonuses",
                    "Priority support",
                    "Exclusive discounts"
                ],
                "ua": [
                    "–î–æ—Å—Ç—É–ø –¥–æ –Ω–æ–≤–∏—Ö –ø—Ä–µ–º—ñ—É–º –∞—Ä—Ö—ñ–≤—ñ–≤",
                    "+2 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞ —â–æ–¥–Ω—è",
                    "5% –∫–µ—à–±–µ–∫ –±–æ–Ω—É—Å–∞–º–∏",
                    "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
                    "–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –∑–Ω–∏–∂–∫–∏"
                ],
                "ru": [
                    "–î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º –ø—Ä–µ–º–∏—É–º –∞—Ä—Ö–∏–≤–∞–º",
                    "+2 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞ –≤ –¥–µ–Ω—å",
                    "5% –∫—ç—à–±—ç–∫ –±–æ–Ω—É—Å–∞–º–∏",
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏"
                ]
            },
            "badge": {
                "en": "POPULAR",
                "ua": "–ü–û–ü–£–õ–Ø–†–ù–ï",
                "ru": "–ü–û–ü–£–õ–Ø–†–ù–û–ï"
            },
            "color": "blue"
        },
        "yearly": {
            "id": "yearly",
            "name": {
                "en": "Yearly Premium",
                "ua": "–†—ñ—á–Ω–∞ Premium",
                "ru": "–ì–æ–¥–æ–≤–∞—è Premium"
            },
            "description": {
                "en": "Get full access for 365 days (Save 2 months!)",
                "ua": "–û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞ 365 –¥–Ω—ñ–≤ (–ï–∫–æ–Ω–æ–º—ñ—è 2 –º—ñ—Å—è—Ü—ñ!)",
                "ru": "–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 365 –¥–Ω–µ–π (–≠–∫–æ–Ω–æ–º–∏—è 2 –º–µ—Å—è—Ü–∞!)"
            },
            "price": 5000,  # –í —Ü–µ–Ω—Ç–∞—Ö
            "price_display": "$50.00",
            "currency": "USD",
            "duration_days": 365,
            "benefits": {
                "en": [
                    "All monthly benefits",
                    "Save $10 (2 months free)",
                    "Annual exclusive content",
                    "Early access to new features",
                    "VIP status boost"
                ],
                "ua": [
                    "–í—Å—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ –º—ñ—Å—è—á–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏",
                    "–ï–∫–æ–Ω–æ–º—ñ—è $10 (2 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)",
                    "–†—ñ—á–Ω–∏–π –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                    "–†–∞–Ω–Ω—ñ–π –¥–æ—Å—Ç—É–ø –¥–æ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π",
                    "–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è VIP —Å—Ç–∞—Ç—É—Å—É"
                ],
                "ru": [
                    "–í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                    "–≠–∫–æ–Ω–æ–º–∏—è $10 (2 –º–µ—Å—è—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
                    "–ì–æ–¥–æ–≤–æ–π —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                    "–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º",
                    "–£—Å–∫–æ—Ä–µ–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞"
                ]
            },
            "badge": {
                "en": "BEST VALUE",
                "ua": "–ù–ê–ô–ö–†–ê–©–ê –¶–Ü–ù–ê",
                "ru": "–õ–£–ß–®–ê–Ø –¶–ï–ù–ê"
            },
            "color": "purple",
            "savings": {
                "amount": 1000,
                "percentage": 17,
                "text": {
                    "en": "Save 17%",
                    "ua": "–ï–∫–æ–Ω–æ–º—ñ—è 17%",
                    "ru": "–≠–∫–æ–Ω–æ–º–∏—è 17%"
                }
            }
        }
    }

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é
    localized_plans = []
    for plan_id, plan in plans.items():
        localized_plan = {
            "id": plan["id"],
            "name": plan["name"].get(language, plan["name"]["en"]),
            "description": plan["description"].get(language, plan["description"]["en"]),
            "price": plan["price"],
            "price_display": plan["price_display"],
            "currency": plan["currency"],
            "duration_days": plan["duration_days"],
            "benefits": plan["benefits"].get(language, plan["benefits"]["en"]),
            "color": plan["color"]
        }

        if "badge" in plan:
            localized_plan["badge"] = plan["badge"].get(language, plan["badge"]["en"])

        if "savings" in plan:
            localized_plan["savings"] = {
                "amount": plan["savings"]["amount"],
                "percentage": plan["savings"]["percentage"],
                "text": plan["savings"]["text"].get(language, plan["savings"]["text"]["en"])
            }

        localized_plans.append(localized_plan)

    return {
        "plans": localized_plans,
        "features": {
            "title": {
                "en": "Premium Features",
                "ua": "Premium –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ",
                "ru": "Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
            }.get(language, "Premium Features"),
            "list": {
                "en": [
                    "üì¶ Access to all new premium archives",
                    "üé∞ +2 daily wheel spins",
                    "üí∞ 5% cashback on all purchases",
                    "‚ö° Priority customer support",
                    "üéÅ Exclusive bonuses and promotions",
                    "üì• Unlimited downloads",
                    "üèÜ VIP status acceleration"
                ],
                "ua": [
                    "üì¶ –î–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö –ø—Ä–µ–º—ñ—É–º –∞—Ä—Ö—ñ–≤—ñ–≤",
                    "üé∞ +2 —â–æ–¥–µ–Ω–Ω—ñ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞",
                    "üí∞ 5% –∫–µ—à–±–µ–∫ –∑ —É—Å—ñ—Ö –ø–æ–∫—É–ø–æ–∫",
                    "‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
                    "üéÅ –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ –∞–∫—Ü—ñ—ó",
                    "üì• –ù–µ–æ–±–º–µ–∂–µ–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
                    "üèÜ –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è VIP —Å—Ç–∞—Ç—É—Å—É"
                ],
                "ru": [
                    "üì¶ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –ø—Ä–µ–º–∏—É–º –∞—Ä—Ö–∏–≤–∞–º",
                    "üé∞ +2 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞",
                    "üí∞ 5% –∫—ç—à–±—ç–∫ —Å–æ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫",
                    "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "üéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏",
                    "üì• –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏",
                    "üèÜ –£—Å–∫–æ—Ä–µ–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞"
                ]
            }.get(language, [])
        }
    }


@router.get("/status")
async def get_subscription_status(
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
    """
    # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
    active_subscription = None
    for subscription in current_user.subscriptions:
        if subscription.is_valid():
            active_subscription = subscription
            break

    if active_subscription:
        return {
            "has_subscription": True,
            "subscription": {
                "id": active_subscription.id,
                "plan_type": active_subscription.plan_type,
                "started_at": active_subscription.started_at.isoformat(),
                "expires_at": active_subscription.expires_at.isoformat(),
                "days_remaining": active_subscription.days_remaining(),
                "auto_renew": active_subscription.auto_renew,
                "is_cancelled": active_subscription.is_cancelled,
                "benefits": {
                    "daily_spins_bonus": active_subscription.daily_spins_bonus,
                    "cashback_percent": active_subscription.cashback_percent
                }
            }
        }
    else:
        return {
            "has_subscription": False,
            "subscription": None
        }


@router.post("/create")
async def create_subscription(
        plan_type: str,
        language: str = Query("en"),
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∫—É

    Args:
        plan_type: –¢–∏–ø –ø–ª–∞–Ω—É (monthly/yearly)
        language: –ú–æ–≤–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂—É

    Returns:
        –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏
    for subscription in current_user.subscriptions:
        if subscription.is_valid():
            raise HTTPException(
                status_code=400,
                detail={
                    "en": "You already have an active subscription",
                    "ua": "–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞",
                    "ru": "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
                }.get(language, "You already have an active subscription")
            )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∫—É
    new_subscription = Subscription.create_subscription(
        user_id=current_user.id,
        plan_type=plan_type
    )

    db.add(new_subscription)
    db.commit()
    db.refresh(new_subscription)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–ª–∞—Ç—ñ–∂ —á–µ—Ä–µ–∑ Cryptomus
    try:
        payment_data = payment_service.create_subscription_payment(
            user_id=current_user.id,
            plan_type=plan_type,
            language=language
        )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ payment_id –≤ –ø—ñ–¥–ø–∏—Å—Ü—ñ
        new_subscription.payment_id = payment_data['payment_id']
        db.commit()

        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        history = SubscriptionHistory(
            user_id=current_user.id,
            subscription_id=new_subscription.id,
            action='created',
            details={
                'plan_type': plan_type,
                'payment_id': payment_data['payment_id']
            }
        )
        db.add(history)
        db.commit()

        return {
            "success": True,
            "subscription_id": new_subscription.id,
            "payment_url": payment_data['payment_url'],
            "payment_id": payment_data['payment_id'],
            "amount": payment_data['amount'],
            "currency": payment_data['currency'],
            "expires_at": payment_data.get('expires_at'),
            "message": {
                "en": "Redirecting to payment...",
                "ua": "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É...",
                "ru": "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–ø–ª–∞—Ç—É..."
            }.get(language, "Redirecting to payment...")
        }

    except Exception as e:
        # –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂
        db.delete(new_subscription)
        db.commit()

        raise HTTPException(
            status_code=500,
            detail={
                "en": f"Failed to create payment: {str(e)}",
                "ua": f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂: {str(e)}",
                "ru": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {str(e)}"
            }.get(language, f"Failed to create payment: {str(e)}")
        )


@router.post("/cancel")
async def cancel_subscription(
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –°–∫–∞—Å—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏

    Returns:
        –°—Ç–∞—Ç—É—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    """
    # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
    active_subscription = None
    for subscription in current_user.subscriptions:
        if subscription.is_valid():
            active_subscription = subscription
            break

    if not active_subscription:
        raise HTTPException(
            status_code=404,
            detail="No active subscription found"
        )

    # –°–∫–∞—Å–æ–≤—É—î–º–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    active_subscription.auto_renew = False
    active_subscription.is_cancelled = True
    active_subscription.cancelled_at = datetime.utcnow()

    # –ó–∞–ø–∏—Å—É—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
    history = SubscriptionHistory(
        user_id=current_user.id,
        subscription_id=active_subscription.id,
        action='cancelled',
        details={'cancelled_by': 'user'}
    )
    db.add(history)
    db.commit()

    return {
        "success": True,
        "message": "Subscription auto-renewal cancelled",
        "expires_at": active_subscription.expires_at.isoformat(),
        "days_remaining": active_subscription.days_remaining()
    }


@router.post("/renew")
async def renew_subscription(
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏

    Returns:
        –°—Ç–∞—Ç—É—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
    """
    # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
    active_subscription = None
    for subscription in current_user.subscriptions:
        if subscription.is_valid() and subscription.is_cancelled:
            active_subscription = subscription
            break

    if not active_subscription:
        raise HTTPException(
            status_code=404,
            detail="No cancelled subscription found"
        )

    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    active_subscription.auto_renew = True
    active_subscription.is_cancelled = False
    active_subscription.cancelled_at = None

    # –ó–∞–ø–∏—Å—É—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
    history = SubscriptionHistory(
        user_id=current_user.id,
        subscription_id=active_subscription.id,
        action='renewed',
        details={'renewed_by': 'user'}
    )
    db.add(history)