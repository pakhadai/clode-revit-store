"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ–Ω—É—Å–∞–º–∏ —Ç–∞ –∫–æ–ª–µ—Å–æ–º —Ñ–æ—Ä—Ç—É–Ω–∏
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from typing import Dict, List
from datetime import datetime

from app.database import get_db
from app.models.user import User
from app.routers.auth import get_current_user_from_token
from app.services.bonus_service import BonusService

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
router = APIRouter(
    prefix="/api/bonuses",
    tags=["Bonuses"]
)


# ====== –©–û–î–ï–ù–ù–Ü –ë–û–ù–£–°–ò ======

@router.get("/daily/status")
async def get_daily_bonus_status(
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞

    Returns:
        –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç—Ä—ñ–∫ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –±–æ–Ω—É—Å–∞
    """
    can_claim = BonusService.check_daily_bonus_available(current_user)
    current_streak = current_user.daily_streak

    # –ù–∞—Å—Ç—É–ø–Ω–∏–π –±–æ–Ω—É—Å
    next_day = min(current_streak + 1, 10) if can_claim else current_streak
    next_bonus = BonusService.STREAK_BONUSES.get(next_day, 10)

    return {
        "can_claim": can_claim,
        "current_streak": current_streak,
        "next_bonus_amount": next_bonus,
        "last_claimed": current_user.last_daily_bonus.isoformat() if current_user.last_daily_bonus else None,
        "streak_bonuses": BonusService.STREAK_BONUSES
    }


@router.post("/daily/claim")
async def claim_daily_bonus(
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å

    Returns:
        –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–∏–π –±–æ–Ω—É—Å

    Raises:
        HTTPException: –Ø–∫—â–æ –±–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ
    """
    try:
        result = BonusService.claim_daily_bonus(current_user, db)

        return {
            "success": True,
            "message": f"–û—Ç—Ä–∏–º–∞–Ω–æ {result['bonus_amount']} –±–æ–Ω—É—Å—ñ–≤!",
            "data": result
        }

    except ValueError as e:
        raise HTTPException(
            status_code=400,
            detail=str(e)
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–æ–Ω—É—Å–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail="–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—ñ –±–æ–Ω—É—Å–∞"
        )


# ====== –ö–û–õ–ï–°–û –§–û–†–¢–£–ù–ò ======

@router.get("/wheel/config")
async def get_wheel_config() -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω–∏

    Returns:
        –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ–∫—Ç–æ—Ä–∏ –∫–æ–ª–µ—Å–∞
    """
    return {
        "sectors": BonusService.WHEEL_SECTORS,
        "spin_cost": 5,  # –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø—ñ–Ω–∞
        "free_spins_daily": 1,  # –ë–∞–∑–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Å–ø—ñ–Ω—ñ–≤
        "subscription_bonus_spins": 2  # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ø—ñ–Ω–∏ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É
    }


@router.get("/wheel/status")
async def get_wheel_status(
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–ª–µ—Å–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ø—ñ–Ω—ñ–≤ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = BonusService.get_wheel_statistics(current_user.id, db)

    return {
        "free_spins_available": current_user.free_spins_today,
        "spin_cost": 5,
        "user_balance": current_user.balance,
        "can_buy_spin": current_user.balance >= 5,
        "statistics": stats
    }


@router.post("/wheel/spin")
async def spin_wheel(
        is_free: bool = True,
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –ö—Ä—É—Ç–∏—Ç–∏ –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω–∏

    Args:
        is_free: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Å–ø—ñ–Ω

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

    Raises:
        HTTPException: –Ø–∫—â–æ –Ω–µ–º–∞—î —Å–ø—Ä–æ–±–æ–∫ –∞–±–æ –±–æ–Ω—É—Å—ñ–≤
    """
    try:
        result = BonusService.spin_wheel(current_user, db, is_free)

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if result["prize"] == 0:
            message = "–ù–∞ –∂–∞–ª—å, —Ü—å–æ–≥–æ —Ä–∞–∑—É –Ω—ñ—á–æ–≥–æ üòî"
        elif result["is_jackpot"]:
            message = f"üéâ –î–ñ–ï–ö–ü–û–¢! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {result['prize']} –±–æ–Ω—É—Å—ñ–≤!"
        else:
            message = f"–í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {result['prize']} –±–æ–Ω—É—Å—ñ–≤!"

        return {
            "success": True,
            "message": message,
            "data": result
        }

    except ValueError as e:
        raise HTTPException(
            status_code=400,
            detail=str(e)
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ –∫–æ–ª–µ—Å–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail="–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ –∫–æ–ª–µ—Å–∞"
        )


@router.get("/wheel/history")
async def get_wheel_history(
        limit: int = 10,
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –∫–æ–ª–µ—Å–∞

    Args:
        limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (–º–∞–∫—Å–∏–º—É–º 50)

    Returns:
        –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
    """
    from app.models.subscription import WheelSpin

    # –û–±–º–µ–∂—É—î–º–æ limit
    limit = min(limit, 50)

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    spins = db.query(WheelSpin).filter(
        WheelSpin.user_id == current_user.id
    ).order_by(
        WheelSpin.spun_at.desc()
    ).limit(limit).all()

    return {
        "history": [
            {
                "id": spin.id,
                "sector": spin.sector,
                "prize": spin.prize,
                "is_jackpot": spin.is_jackpot,
                "is_free": spin.is_free,
                "date": spin.spun_at.isoformat()
            }
            for spin in spins
        ],
        "total_count": db.query(WheelSpin).filter(
            WheelSpin.user_id == current_user.id
        ).count()
    }


@router.get("/wheel/leaderboard")
async def get_wheel_leaderboard(
        limit: int = 10,
        db: Session = Depends(get_db)
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω–∏

    Args:
        limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–º–∞–∫—Å–∏–º—É–º 100)

    Returns:
        –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ –≤–∏–≥—Ä–∞—à–∞—Ö
    """
    # –û–±–º–µ–∂—É—î–º–æ limit
    limit = min(limit, 100)

    leaderboard = BonusService.get_leaderboard(db, limit)

    return {
        "leaderboard": leaderboard,
        "updated_at": datetime.utcnow().isoformat()
    }


# ====== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ======

@router.get("/statistics")
async def get_bonus_statistics(
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–Ω—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å—ñ—Ö —Ç–∏–ø–∞—Ö –±–æ–Ω—É—Å—ñ–≤
    """
    from app.models.subscription import DailyBonus, WheelSpin

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤
    daily_bonuses_count = db.query(DailyBonus).filter(
        DailyBonus.user_id == current_user.id
    ).count()

    total_daily_bonuses = db.query(
        db.func.sum(DailyBonus.bonus_amount)
    ).filter(
        DailyBonus.user_id == current_user.id
    ).scalar() or 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–µ—Å–∞
    wheel_stats = BonusService.get_wheel_statistics(current_user.id, db)

    # –†–∞—Ö—É—î–º–æ –≤–∏—Ç—Ä–∞—á–µ–Ω—ñ –±–æ–Ω—É—Å–∏ –Ω–∞ –ø–ª–∞—Ç–Ω—ñ —Å–ø—ñ–Ω–∏
    paid_spins = db.query(WheelSpin).filter(
        WheelSpin.user_id == current_user.id,
        WheelSpin.is_free == False
    ).count()

    bonuses_spent_on_spins = paid_spins * 5  # 5 –±–æ–Ω—É—Å—ñ–≤ –∑–∞ —Å–ø—ñ–Ω

    return {
        "current_balance": current_user.balance,
        "daily_bonuses": {
            "current_streak": current_user.daily_streak,
            "total_claimed": daily_bonuses_count,
            "total_received": total_daily_bonuses,
            "max_streak": 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å—Ç—Ä—ñ–∫
        },
        "wheel": {
            "total_spins": wheel_stats["total_spins"],
            "total_won": wheel_stats["total_won"],
            "jackpots": wheel_stats["jackpots"],
            "win_rate": wheel_stats["win_rate"],
            "bonuses_spent": bonuses_spent_on_spins
        },
        "referrals": {
            "total_earned": current_user.referral_earnings,
            "referral_code": current_user.referral_code
        },
        "total_earned": total_daily_bonuses + wheel_stats["total_won"] + current_user.referral_earnings
    }


@router.get("/available")
async def get_available_bonuses(
        current_user: User = Depends(get_current_user_from_token),
        db: Session = Depends(get_db)
) -> Dict:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ –∞–∫—Ü—ñ—ó

    Returns:
        –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤
    """
    available = []

    # –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å
    if BonusService.check_daily_bonus_available(current_user):
        next_bonus = BonusService.STREAK_BONUSES.get(
            min(current_user.daily_streak + 1, 10), 10
        )
        available.append({
            "type": "daily_bonus",
            "title": "–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å",
            "description": f"–û—Ç—Ä–∏–º–∞–π—Ç–µ {next_bonus} –±–æ–Ω—É—Å—ñ–≤ –∑–∞ –¥–µ–Ω—å {min(current_user.daily_streak + 1, 10)} —Å—Ç—Ä—ñ–∫—É",
            "action": "claim_daily",
            "icon": "üéÅ"
        })

    # –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—ñ–Ω–∏
    if current_user.free_spins_today > 0:
        available.append({
            "type": "free_spin",
            "title": "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—Ä–æ–±–∏ –∫–æ–ª–µ—Å–∞",
            "description": f"–£ –≤–∞—Å —î {current_user.free_spins_today} –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Å–ø—Ä–æ–±–æ–∫",
            "action": "spin_wheel",
            "icon": "üé∞"
        })

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å
    available.append({
        "type": "referral",
        "title": "–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–∑—ñ–≤",
        "description": "–û—Ç—Ä–∏–º–∞–π—Ç–µ 30 –±–æ–Ω—É—Å—ñ–≤ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ–≥–æ –¥—Ä—É–≥–∞",
        "action": "share_referral",
        "icon": "ü§ù"
    })

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–∫–∏ - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ
    has_subscription = False
    for sub in current_user.subscriptions:
        if sub.is_valid():
            has_subscription = True
            break

    if not has_subscription:
        available.append({
            "type": "subscription",
            "title": "–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞",
            "description": "+2 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—ñ–Ω–∏ —â–æ–¥–Ω—è —Ç–∞ 5% –∫–µ—à–±–µ–∫",
            "action": "get_subscription",
            "icon": "‚≠ê"
        })

    return {
        "available_bonuses": available,
        "user_balance": current_user.balance
    }