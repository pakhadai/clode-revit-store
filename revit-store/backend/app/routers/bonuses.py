"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –±–æ–Ω—É—Å—ñ–≤ —Ç–∞ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω–∏
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from sqlalchemy import func
from typing import Dict, List
from datetime import datetime, timedelta
import random
import json

from app.database import get_db
from app.models.user import User
from app.models.subscription import DailyBonus, WheelSpin
from app.routers.auth import get_current_user_from_token
from app.services.bonus_service import BonusService

router = APIRouter(
    prefix="/api/bonuses",
    tags=["Bonuses"]
)

# –°—Ç—Ä—ñ–∫ –±–æ–Ω—É—Å–∏: –¥–µ–Ω—å -> –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤
STREAK_BONUSES = {
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 7,
    7: 10,
    # –ü—ñ—Å–ª—è 7 –¥–Ω—è –∑–∞–≤–∂–¥–∏ 10
}

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω–∏
WHEEL_SECTORS = [
    {"id": 0, "value": 100, "probability": 0.0003, "label": "üíé –ú–ï–ì–ê–ë–û–ù–£–°"},  # 0.03%
    {"id": 1, "value": 0, "probability": 0.0997, "label": "üòï –ü—É—Å—Ç–æ"},       # ~10%
    {"id": 2, "value": 0, "probability": 0.1, "label": "üòï –ü—É—Å—Ç–æ"},           # 10%
    {"id": 3, "value": 0, "probability": 0.1, "label": "üòï –ü—É—Å—Ç–æ"},           # 10%
    {"id": 4, "value": 1, "probability": 0.15, "label": "üéØ 1 –±–æ–Ω—É—Å"},        # 15%
    {"id": 5, "value": 2, "probability": 0.15, "label": "üéØ 2 –±–æ–Ω—É—Å–∏"},       # 15%
    {"id": 6, "value": 3, "probability": 0.1, "label": "üéØ 3 –±–æ–Ω—É—Å–∏"},        # 10%
    {"id": 7, "value": 4, "probability": 0.1, "label": "üéØ 4 –±–æ–Ω—É—Å–∏"},        # 10%
    {"id": 8, "value": 5, "probability": 0.1, "label": "üéØ 5 –±–æ–Ω—É—Å—ñ–≤"},       # 10%
    {"id": 9, "value": 3, "probability": 0.1, "label": "üéØ 3 –±–æ–Ω—É—Å–∏"}         # 10%
]

@router.get("/daily/status")
async def get_daily_bonus_status(
    current_user: User = Depends(get_current_user_from_token),
    db: Session = Depends(get_db)
) -> Dict:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É"""

    today = datetime.utcnow().date()

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –±–æ–Ω—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    last_bonus = db.query(DailyBonus).filter(
        DailyBonus.user_id == current_user.id
    ).order_by(DailyBonus.claimed_at.desc()).first()

    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç—Ä—ñ–∫
    current_streak = 1
    can_claim = True
    last_claimed = None

    if last_bonus:
        last_claimed = last_bonus.claimed_at.date()
        days_diff = (today - last_claimed).days

        if days_diff == 0:
            # –í–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ
            can_claim = False
            current_streak = last_bonus.day_number
        elif days_diff == 1:
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å—Ç—Ä—ñ–∫
            current_streak = min(last_bonus.day_number + 1, 7)
        else:
            # –°—Ç—Ä—ñ–∫ –æ–±–Ω—É–ª–∏–≤—Å—è
            current_streak = 1

    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å
    bonus_amount = STREAK_BONUSES.get(current_streak, 10)

    return {
        "can_claim": can_claim,
        "current_streak": current_streak,
        "bonus_amount": bonus_amount,
        "last_claimed": last_claimed.isoformat() if last_claimed else None,
        "next_reset": (datetime.utcnow().replace(hour=0, minute=0, second=0) + timedelta(days=1)).isoformat()
    }

@router.post("/daily/claim")
async def claim_daily_bonus(
    current_user: User = Depends(get_current_user_from_token),
    db: Session = Depends(get_db)
) -> Dict:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å"""

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏
    status = await get_daily_bonus_status(current_user, db)

    if not status["can_claim"]:
        raise HTTPException(
            status_code=400,
            detail="Daily bonus already claimed today"
        )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å
    daily_bonus = DailyBonus(
        user_id=current_user.id,
        day_number=status["current_streak"],
        bonus_amount=status["bonus_amount"],
        claimed_at=datetime.utcnow()
    )
    db.add(daily_bonus)

    # –î–æ–¥–∞—î–º–æ –±–æ–Ω—É—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    current_user.balance += status["bonus_amount"]

    # –ó–∞–ø–∏—Å—É—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
    #history = BonusHistory(
    #   user_id=current_user.id,
    #    type="daily",
    #    amount=status["bonus_amount"],
    #    details={"streak_day": status["current_streak"]}
    #)
    #db.add(history)

    db.commit()

    return {
        "success": True,
        "bonus_amount": status["bonus_amount"],
        "new_balance": current_user.balance,
        "streak_day": status["current_streak"],
        "next_bonus": (datetime.utcnow().replace(hour=0, minute=0, second=0) + timedelta(days=1)).isoformat()
    }

@router.get("/wheel/config")
async def get_wheel_config() -> Dict:

    return {
        "sectors": WHEEL_SECTORS,
        "spin_cost": 5
    }


@router.get("/wheel/status")
async def get_wheel_status(
    current_user: User = Depends(get_current_user_from_token),
    db: Session = Depends(get_db)
) -> Dict:

    today = datetime.utcnow().date()

    spins_today = db.query(func.count(WheelSpin.id)).filter(
        WheelSpin.user_id == current_user.id,
        func.date(WheelSpin.spun_at) == today
    ).scalar() or 0

    has_subscription = current_user.has_active_subscription(db)
    free_spins = 3 if has_subscription else 1

    return {
        "sectors": WHEEL_SECTORS,
        "spins_today": spins_today,
        "free_spins_remaining": max(0, free_spins - spins_today),
        "spin_cost": 5,  # –±–æ–Ω—É—Å—ñ–≤ –∑–∞ —Å–ø—Ä–æ–±—É
        "has_subscription": has_subscription
    }

@router.post("/wheel/spin")
async def spin_wheel(
    use_bonus: bool = False,
    current_user: User = Depends(get_current_user_from_token),
    db: Session = Depends(get_db)
) -> Dict:
    """–ö—Ä—É—Ç–∏—Ç–∏ –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω–∏"""

    status = await get_wheel_status(current_user, db)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—Ä–æ–±–∏
    if status["free_spins_remaining"] <= 0:
        if not use_bonus:
            raise HTTPException(
                status_code=400,
                detail="No free spins available"
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
        if current_user.balance < status["spin_cost"]:
            raise HTTPException(
                status_code=400,
                detail="Insufficient balance for spin"
            )

        # –ó–Ω—ñ–º–∞—î–º–æ –±–æ–Ω—É—Å–∏
        current_user.balance -= status["spin_cost"]

    # –í–∏–±–∏—Ä–∞—î–º–æ —Å–µ–∫—Ç–æ—Ä –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—ñ—Ä–æ–≥—ñ–¥–Ω–æ—Å—Ç–µ–π
    random_value = random.random()
    cumulative_probability = 0
    selected_sector = WHEEL_SECTORS[-1]

    for sector in WHEEL_SECTORS:
        cumulative_probability += sector["probability"]
        if random_value <= cumulative_probability:
            selected_sector = sector
            break

    # –ó–∞–ø–∏—Å—É—î–º–æ —Å–ø—Ä–æ–±—É
    spin = WheelSpin(
        user_id=current_user.id,
        sector=selected_sector["id"],      # <--- –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
        prize=selected_sector["value"],   # <--- –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
        is_free=(status["free_spins_remaining"] > 0) and not use_bonus,
        spun_at=datetime.utcnow(),
        cost=0 if (status["free_spins_remaining"] > 0 and not use_bonus) else status["spin_cost"]
    )
    db.add(spin)

    # –î–æ–¥–∞—î–º–æ –≤–∏–≥—Ä–∞—à
    if selected_sector["value"] > 0:
        current_user.balance += selected_sector["value"]

    db.commit()
    db.refresh(current_user)

    return {
        "success": True,
        "sector": selected_sector["id"],
        "prize": selected_sector["value"],
        "label": selected_sector["label"],
        "new_balance": current_user.balance,
        "is_jackpot": selected_sector["value"] == 100,
        "free_spins_left": status["free_spins_remaining"] - 1 if (status["free_spins_remaining"] > 0 and not use_bonus) else status["free_spins_remaining"]
    }

# --- –î–û–î–ê–ô–¢–ï –¶–Ü –ù–û–í–Ü –ï–ù–î–ü–û–Ü–ù–¢–ò ---

@router.get("/statistics")
async def get_user_statistics(
    current_user: User = Depends(get_current_user_from_token),
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    bonus_service = BonusService()
    # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è, –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–µ—Ä–≤—ñ—Å–Ω–∏–π —à–∞—Ä
    daily_stats = db.query(DailyBonus).filter(DailyBonus.user_id == current_user.id).count()
    wheel_stats = bonus_service.get_wheel_statistics(current_user.id, db)
    return {
        "current_balance": current_user.balance,
        "total_earned": current_user.balance, # –ü–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞
        "daily_bonuses": {"total_claimed": daily_stats, "current_streak": current_user.daily_streak},
        "wheel": wheel_stats,
        "referrals": {"total_earned": current_user.referral_earnings}
    }

@router.get("/wheel/history")
async def get_wheel_history(
    limit: int = 10,
    current_user: User = Depends(get_current_user_from_token),
    db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –æ–±–µ—Ä—Ç–∞–Ω—å –∫–æ–ª–µ—Å–∞."""
    history = db.query(WheelSpin).filter(WheelSpin.user_id == current_user.id).order_by(WheelSpin.spun_at.desc()).limit(limit).all()
    return {
        "history": [
            {
                "date": spin.spun_at,
                "prize": spin.prize,
                "is_jackpot": spin.is_jackpot
            } for spin in history
        ]
    }
