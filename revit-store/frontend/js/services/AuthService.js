// js/services/AuthService.js
import { UserStore } from '../store/UserStore.js';
import { TelegramService } from './TelegramService.js';
import { LoginModal } from '../components/LoginModal.js';

export class AuthService {
    constructor() {
        this.userStore = new UserStore();
        this.telegramService = new TelegramService();
        this.user = null;
        this.tg = null;
        this.isWebApp = false;

        // –†–æ–±–∏–º–æ callback-—Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–∂–µ—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ—é
        window.onTelegramAuth = this.handleWidgetAuth.bind(this);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É: –≤–∏–∑–Ω–∞—á–∞—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ —Ç–∞ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å.
     */
    async init() {
        console.log('üîê AuthService init...');
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Service
        this.tg = this.telegramService.init();
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ —Ü–µ Telegram Web App
        this.isWebApp = this.isTelegramWebApp();
        console.log('Environment check:', {
            isWebApp: this.isWebApp,
            hasTelegram: !!window.Telegram,
            hasWebApp: !!(window.Telegram && window.Telegram.WebApp),
            hasInitData: !!(window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData),
            initDataLength: window.Telegram?.WebApp?.initData?.length || 0
        });

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const cachedUser = this.userStore.getUser();
        const cachedToken = localStorage.getItem('access_token');

        if (cachedUser && cachedToken) {
            console.log('Found cached user:', cachedUser.first_name);
            this.user = cachedUser;
            api.setToken(cachedToken);
            return true;
        }

        // –Ø–∫—â–æ —Ü–µ Telegram Web App —ñ —î initData - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ª–æ–≥—ñ–Ω–∏–º–æ—Å—å
        if (this.isWebApp && this.tg && this.tg.initData) {
            console.log('Auto-login in Telegram Web App...');
            return await this.authenticateWithWebApp(this.tg.initData);
        }

        console.log('No automatic authentication available');
        return false;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ Telegram Web App.
     */
    isTelegramWebApp() {
        // –ù–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–± - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ initData
        return !!(window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
     */
    async getUser() {
        if (this.user) return this.user;

        const cachedUser = this.userStore.getUser();
        if (cachedUser) {
            this.user = cachedUser;
            return this.user;
        }

        return null;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    isAuthenticated() {
        return api.isAuthenticated() && this.user !== null;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–≤—ñ–π—Ç–∏")
     * –£–í–ê–ì–ê: –¶–µ–π –º–µ—Ç–æ–¥ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è - –∑–∞–º—ñ—Å—Ç—å –Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ LoginModal.show()
     */
    async authenticate() {
        console.log('‚ö†Ô∏è authenticate() called - redirecting to LoginModal.show()');

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥
        if (window.LoginModal) {
            window.LoginModal.show();
        } else {
            console.error('LoginModal not loaded!');
            Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è –≤—Ö–æ–¥—É', 'error');
        }

        return false;
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Web App (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞).
     */
    async authenticateWithWebApp(initData) {
        if (!initData) {
            console.error('No initData available');
            return false;
        }

        try {
            Utils.showLoader(true);
            console.log('Authenticating with initData...');
            
            const response = await api.loginWithTelegram(initData);
            
            if (response.access_token && response.user) {
                console.log('Authentication successful:', response.user);
                
                this.user = response.user;
                this.userStore.saveUser(this.user);
                localStorage.setItem('access_token', response.access_token);
                api.setToken(response.access_token);
                
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É —Ç–∞ —Ç–µ–º—É
                const language = this.user.language || this.telegramService.getTelegramUser()?.language_code || 'uk';
                Utils.setLanguage(language);
                
                const theme = this.user.theme || this.telegramService.getTelegramTheme() || 'light';
                Utils.setTheme(theme);
                
                window.dispatchEvent(new CustomEvent('auth:success', { detail: this.user }));
                
                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                if (window.app) {
                    window.app.updateUI();
                }
                
                return true;
            }
            
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω');
        } catch (error) {
            console.error('Web App Authentication error:', error);
            Utils.showNotification(`–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: ${error.message}`, 'error');
            return false;
        } finally {
            Utils.showLoader(false);
        }
    }

    /**
     * –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –í–Ü–î–ñ–ï–¢–û–ú –Ω–∞ —Å–∞–π—Ç—ñ –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É.
     */
    async handleWidgetAuth(user) {
        console.log('Widget authentication received:', user);
        
        try {
            Utils.showLoader(true);
            
            // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            LoginModal.hide();
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await api.post('/auth/telegram-widget', user);
            
            if (response.user && response.access_token) {
                console.log('Widget authentication successful:', response.user);
                
                this.user = response.user;
                this.userStore.saveUser(this.user);
                localStorage.setItem('access_token', response.access_token);
                api.setToken(response.access_token);
                
                Utils.showNotification(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${this.user.first_name}!`, 'success');
                
                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                if (window.app) {
                    window.app.updateUI();
                    // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—Ä–æ—Ñ—ñ–ª—é - –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º–æ —ó—ó
                    if (window.app.currentPage === 'profile') {
                        window.app.render();
                    }
                }
                
                window.dispatchEvent(new CustomEvent('auth:success', { detail: this.user }));
            } else {
                throw new Error('–ù–µ–ø–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error("Widget authentication error:", error);
            Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Telegram', 'error');
        } finally {
            Utils.showLoader(false);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –ø–æ–∫–∞–∑–æ–º –¥—ñ–∞–ª–æ–≥—É –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
     */
    async requireAuthentication() {
        if (this.isAuthenticated()) {
            return true;
        }

        // –î–ª—è Web App —Å–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
        if (this.isWebApp) {
            const success = await this.authenticate();
            if (success) return true;
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –≤—Ö–æ–¥—É
        Utils.showNotification('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è', 'warning');
        LoginModal.show();
        return false;
    }

    /**
     * –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏
     */
    async logout() {
        try {
            await api.logout();
        } catch (error) {
            console.error('Logout error:', error);
        }
        
        this.user = null;
        this.userStore.clearUser();
        localStorage.removeItem('access_token');
        api.setToken(null);
        
        window.dispatchEvent(new CustomEvent('auth:logout'));
        
        if (this.isWebApp && this.tg && this.tg.close) {
            this.tg.close();
        } else {
            window.location.reload();
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª–µ–π
     */
    isAdmin() {
        return this.user?.is_admin || false;
    }

    isCreator() {
        return this.user?.is_creator || false;
    }

    // –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ –¥–æ —Å–µ—Ä–≤—ñ—Å—É Telegram
    getTelegramUser() { 
        return this.telegramService.getTelegramUser(); 
    }
    
    getTelegramTheme() { 
        return this.telegramService.getTelegramTheme(); 
    }

    hapticFeedback(type, style) {
        return this.telegramService.hapticFeedback(type, style);
    }

    showConfirm(message, callback) {
        return this.telegramService.showConfirm(message, callback);
    }
}

export default AuthService;