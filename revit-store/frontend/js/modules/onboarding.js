class OnboardingModule {
    constructor() {
        this.currentStep = 0;
        this.slides = [
            {
                icon: 'üèõÔ∏è',
                title: '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!',
                text: 'OhMyRevit - –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞—Ä—Ö—ñ–≤—ñ–≤ –¥–ª—è Revit. –ó–Ω–∞—Ö–æ–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è —Ç–∞ –¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º–∏.'
            },
            {
                icon: '‚ú®',
                title: '–ü—Ä–µ–º—ñ—É–º –∫–æ–Ω—Ç–µ–Ω—Ç',
                text: '–¢–∏—Å—è—á—ñ –∞—Ä—Ö—ñ–≤—ñ–≤ –≤—ñ–¥ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö –ø—Ä–µ–º—ñ—É–º-—Å—ñ–º–µ–π—Å—Ç–≤.'
            },
            {
                icon: 'üéØ',
                title: '–ü—ñ–¥–ø–∏—Å–∫–∞ —Ç–∞ –±–æ–Ω—É—Å–∏',
                text: '–û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö –∞—Ä—Ö—ñ–≤—ñ–≤, 5% –∫–µ—à–±–µ–∫ —Ç–∞ —â–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏!'
            },
            {
                icon: 'üé®',
                title: '–°—Ç–∞–Ω—å—Ç–µ —Ç–≤–æ—Ä—Ü–µ–º',
                text: '–ú–æ–Ω–µ—Ç–∏–∑—É–π—Ç–µ —Å–≤–æ—ó Revit-—Å—ñ–º–µ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –Ω–∞—à –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å.'
            },
            {
                icon: 'üéÅ',
                title: '–ü–æ—á–Ω—ñ–º–æ!',
                text: '–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω–∏, —â–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å!'
            }
        ];
    }

    shouldShow() {
        // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        const user = Utils.storage.get('user');
        if (!user) return false;

        const onboardingKey = `onboarding_shown_${user.telegram_id}`;
        return !Utils.storage.get(onboardingKey, false);
    }

    start() {
        if (!this.shouldShow()) return;
        this.render();

        // –í—ñ–¥–º—ñ—á–∞—î–º–æ —è–∫ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        const user = Utils.storage.get('user');
        if (user) {
            Utils.storage.set(`onboarding_shown_${user.telegram_id}`, true);
        }
    }

    render() {
        const overlay = document.createElement('div');
        overlay.className = 'onboarding-overlay';
        overlay.innerHTML = `
            <div class="onboarding-container">
                <div class="onboarding-progress">
                    <div class="onboarding-progress-bar" style="width: 20%"></div>
                </div>

                ${this.slides.map((slide, index) => `
                    <div class="onboarding-slide ${index === 0 ? 'active' : ''}">
                        <div class="onboarding-icon">${slide.icon}</div>
                        <div class="onboarding-content">
                            <h2 class="onboarding-title">${slide.title}</h2>
                            <p class="onboarding-text">${slide.text}</p>
                        </div>
                        <div class="onboarding-actions">
                            ${index < this.slides.length - 1 ?
                                `<button class="onboarding-btn onboarding-btn-skip" onclick="onboarding.finish()">–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏</button>` :
                                ''
                            }
                            <button class="onboarding-btn onboarding-btn-next" onclick="onboarding.${index < this.slides.length - 1 ? 'next' : 'finish'}()">
                                ${index < this.slides.length - 1 ? '–î–∞–ª—ñ' : '–†–æ–∑–ø–æ—á–∞—Ç–∏'}
                            </button>
                        </div>
                    </div>
                `).join('')}

                <div class="onboarding-dots">
                    ${this.slides.map((_, i) =>
                        `<div class="onboarding-dot ${i === 0 ? 'active' : ''}" onclick="onboarding.goToStep(${i})"></div>`
                    ).join('')}
                </div>
            </div>
        `;

        document.body.appendChild(overlay);
    }

    next() {
        if (this.currentStep < this.slides.length - 1) {
            this.goToStep(this.currentStep + 1);
        }
    }

    goToStep(index) {
        const slides = document.querySelectorAll('.onboarding-slide');
        const dots = document.querySelectorAll('.onboarding-dot');
        const progressBar = document.querySelector('.onboarding-progress-bar');

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª–∞–π–¥–∏
        slides[this.currentStep].classList.remove('active');
        slides[this.currentStep].classList.add('prev');

        slides[index].classList.remove('prev');
        slides[index].classList.add('active');

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—á–∫–∏
        dots[this.currentStep].classList.remove('active');
        dots[index].classList.add('active');

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
        const progress = ((index + 1) / this.slides.length) * 100;
        progressBar.style.width = `${progress}%`;

        this.currentStep = index;

        // –í—ñ–±—Ä–∞—Ü—ñ—è –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
        if (window.auth?.hapticFeedback) {
            window.auth.hapticFeedback('selection');
        }
    }

    finish() {
        const overlay = document.querySelector('.onboarding-overlay');
        if (overlay) {
            overlay.classList.add('closing');
            setTimeout(() => overlay.remove(), 300);
        }

        // –í—ñ–±—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        if (window.auth?.hapticFeedback) {
            window.auth.hapticFeedback('impact', 'medium');
        }
    }
}

window.onboarding = new OnboardingModule();