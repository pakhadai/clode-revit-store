/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
class CollectionsModule {
    constructor() {
        this.collections = [];
        // –ù–∞—à–∞ –ø–∞–ª—ñ—Ç—Ä–∞ –µ–º–æ–¥–∑—ñ
        this.emojiPalette = ['‚ù§Ô∏è', '‚≠êÔ∏è', 'üí°', '‚úÖ', 'üî•', 'üíé', 'üì¶', 'üìå', 'üìÅ', 'üí∞'];
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–ª–µ–∫—Ü—ñ—é
     */
    async showAddToCollectionModal(productId) {
        if (!auth.isAuthenticated()) {
            Utils.showNotification('–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è', 'warning');
            return;
        }

        try {
            this.collections = await api.get('/collections/');
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –≤ —è–∫–∏—Ö –∫–æ–ª–µ–∫—Ü—ñ—è—Ö –≤–∂–µ —î —Ü–µ–π —Ç–æ–≤–∞—Ä
            for (let c of this.collections) {
                c.has_product = await this.isProductInCollection(c.id, productId);
            }
        } catch (e) {
            this.collections = [];
        }

        const modal = document.createElement('div');
        modal.id = 'collection-modal';
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4';

        modal.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-2xl max-w-sm w-full p-6 transform transition-transform scale-95 opacity-0 animate-modal-in">
                <h3 class="text-xl font-bold mb-4 dark:text-white">–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–æ...</h3>
                <div id="collections-list" class="space-y-2 max-h-48 overflow-y-auto mb-4">
                    ${this.collections.map(c => this.renderCollectionItem(c, productId)).join('')}
                </div>
                <div class="new-collection-form pt-4 border-t dark:border-gray-700">
                     <p class="text-sm font-medium mb-2 dark:text-gray-300">–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–æ–ª–µ–∫—Ü—ñ—é:</p>
                     <input type="text" id="new-collection-name" class="w-full p-2 border rounded dark:bg-gray-700 mb-2" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥, '–î–ª—è –∫—É—Ö–Ω—ñ'">
                     <div class="flex items-center gap-2 mb-3">
                        <span class="text-sm dark:text-gray-400">–Ü–∫–æ–Ω–∫–∞:</span>
                        <div id="emoji-palette" class="flex gap-1">
                            ${this.emojiPalette.map((emoji, index) => `<button class="p-1 rounded-full text-lg hover:bg-gray-200 dark:hover:bg-gray-600 ${index === 0 ? 'bg-blue-200 dark:bg-blue-800' : ''}" data-emoji="${emoji}">${emoji}</button>`).join('')}
                        </div>
                     </div>
                     <button onclick="collections.createNewCollection(${productId})" class="w-full bg-blue-500 text-white p-2 rounded-lg font-bold hover:bg-blue-600">–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ –¥–æ–¥–∞—Ç–∏</button>
                </div>
                 <button onclick="this.closest('#collection-modal').remove()" class="w-full mt-4 bg-gray-200 dark:bg-gray-600 p-2 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500">–ó–∞–∫—Ä–∏—Ç–∏</button>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –µ–º–æ–¥–∑—ñ
        modal.querySelector('#emoji-palette').addEventListener('click', e => {
            if (e.target.tagName === 'BUTTON') {
                modal.querySelectorAll('#emoji-palette button').forEach(btn => btn.classList.remove('bg-blue-200', 'dark:bg-blue-800'));
                e.target.classList.add('bg-blue-200', 'dark:bg-blue-800');
            }
        });

        // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
        setTimeout(() => {
            modal.querySelector('.animate-modal-in').classList.add('scale-100', 'opacity-100');
        }, 10);
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä—É –µ–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫—É
    renderCollectionItem(collection, productId) {
        const checkmark = collection.has_product ? '<span class="text-green-500 font-bold">‚úì</span>' : '';
        return `
            <div onclick="collections.toggleProductInCollection(${collection.id}, ${productId}, this)"
                 class="collection-item flex justify-between items-center p-3 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 ${collection.has_product ? 'bg-gray-100 dark:bg-gray-700' : ''}">
                <div class="flex items-center gap-3">
                    <span class="text-2xl">${collection.icon}</span>
                    <span class="font-medium dark:text-gray-200">${collection.name}</span>
                </div>
                ${checkmark}
            </div>
        `;
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    async isProductInCollection(collectionId, productId) {
        try {
            const collection = await api.get(`/collections/${collectionId}`);
            return collection.products.some(p => p.id === productId);
        } catch {
            return false;
        }
    }


    /**
     * –î–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ —ñ—Å–Ω—É—é—á–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó
     */
    async toggleProductInCollection(collectionId, productId, element) {
        try {
            const response = await api.post('/collections/products/toggle', { collection_id: collectionId, product_id: productId });
            if (response.action === 'added') {
                element.classList.add('bg-gray-100', 'dark:bg-gray-700');
                const checkmark = document.createElement('span');
                checkmark.className = 'text-green-500 font-bold';
                checkmark.textContent = '‚úì';
                element.appendChild(checkmark);
                this.updateProductCardIcon(productId);
            } else {
                element.classList.remove('bg-gray-100', 'dark:bg-gray-700');
                element.querySelector('.text-green-500').remove();
                this.updateProductCardIcon(productId);
            }
        } catch (error) {
            Utils.showNotification('–ü–æ–º–∏–ª–∫–∞', 'error');
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–æ–ª–µ–∫—Ü—ñ—é —Ç–∞ –¥–æ–¥–∞—Ç–∏ —Ç—É–¥–∏ —Ç–æ–≤–∞—Ä
     */
    async createNewCollection(productId) {
        const nameInput = document.getElementById('new-collection-name');
        const name = nameInput.value.trim();
        const selectedEmojiEl = document.querySelector('#emoji-palette .bg-blue-200');
        const icon = selectedEmojiEl ? selectedEmojiEl.dataset.emoji : 'ü§ç';

        if (!name) {
            Utils.showNotification('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª–µ–∫—Ü—ñ—ó', 'warning');
            return;
        }

        try {
            const newCollection = await api.post('/collections/', { name, icon, product_id: productId });
            Utils.showNotification(`–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ–ª–µ–∫—Ü—ñ—é "${name}" —Ç–∞ –¥–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä`, 'success');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const listEl = document.getElementById('collections-list');
            const newItemEl = document.createElement('div');
            newItemEl.innerHTML = this.renderCollectionItem({ ...newCollection, has_product: true }, productId);
            listEl.appendChild(newItemEl.firstChild);
            nameInput.value = '';

            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –Ω–∞ –∫–∞—Ä—Ç—Ü—ñ —Ç–æ–≤–∞—Ä—É
            this.updateProductCardIcon(productId);

        } catch (error) {
            Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó', 'error');
        }
    }

    /**
     * –û–Ω–æ–≤–ª—é—î —ñ–∫–æ–Ω–∫—É –Ω–∞ –∫–∞—Ä—Ç—Ü—ñ —Ç–æ–≤–∞—Ä—É, –∑–∞–ø–∏—Ç—É—é—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async updateProductCardIcon(productId) {
        const cardBtn = document.querySelector(`.collection-btn[data-product-id="${productId}"] span`);
        if (!cardBtn) return;

        try {
            const status = await api.get(`/collections/product-status/${productId}`);
            cardBtn.textContent = status.icon;
        } catch {
            cardBtn.textContent = 'ü§ç';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó
     */
    showEditCollectionModal(collectionId, currentName, currentIcon) {
        const modal = document.createElement('div');
        modal.id = 'edit-collection-modal';
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4';

        modal.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-2xl max-w-sm w-full p-6 transform transition-transform scale-95 opacity-0 animate-modal-in">
                <h3 class="text-xl font-bold mb-6 dark:text-white">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó</h3>

                <div class="mb-4">
                    <label for="edit-collection-name" class="block text-sm font-medium mb-1 dark:text-gray-300">–ù–∞–∑–≤–∞</label>
                    <input type="text" id="edit-collection-name" class="w-full p-2 border rounded dark:bg-gray-700" value="${currentName}">
                </div>

                <div class="mb-6">
                    <label class="block text-sm font-medium mb-2 dark:text-gray-300">–Ü–∫–æ–Ω–∫–∞</label>
                    <div id="edit-emoji-palette" class="flex flex-wrap gap-2">
                        ${this.emojiPalette.map(emoji => `
                            <button class="p-2 rounded-full text-2xl hover:bg-gray-200 dark:hover:bg-gray-600 ${emoji === currentIcon ? 'bg-blue-200 dark:bg-blue-800' : ''}" data-emoji="${emoji}">
                                ${emoji}
                            </button>
                        `).join('')}
                    </div>
                </div>

                <div class="flex justify-between items-center gap-3">
                    <button onclick="collections.deleteCollection(${collectionId}, this)" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg font-bold">
                        –í–∏–¥–∞–ª–∏—Ç–∏
                    </button>
                    <div class="flex gap-3">
                        <button onclick="this.closest('#edit-collection-modal').remove()" class="bg-gray-200 dark:bg-gray-600 px-4 py-2 rounded-lg">
                            –°–∫–∞—Å—É–≤–∞—Ç–∏
                        </button>
                        <button onclick="collections.updateCollection(${collectionId})" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg font-bold">
                            –ó–±–µ—Ä–µ–≥—Ç–∏
                        </button>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);

        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –µ–º–æ–¥–∑—ñ
        modal.querySelector('#edit-emoji-palette').addEventListener('click', e => {
            if (e.target.tagName === 'BUTTON') {
                modal.querySelectorAll('#edit-emoji-palette button').forEach(btn => btn.classList.remove('bg-blue-200', 'dark:bg-blue-800'));
                e.target.classList.add('bg-blue-200', 'dark:bg-blue-800');
            }
        });

        // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
        setTimeout(() => {
            modal.querySelector('.animate-modal-in').classList.add('scale-100', 'opacity-100');
        }, 10);
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞ —ñ–∫–æ–Ω–∫—É –∫–æ–ª–µ–∫—Ü—ñ—ó
     */
    async updateCollection(collectionId) {
        const nameInput = document.getElementById('edit-collection-name');
        const name = nameInput.value.trim();
        const selectedEmojiEl = document.querySelector('#edit-emoji-palette .bg-blue-200');
        const icon = selectedEmojiEl ? selectedEmojiEl.dataset.emoji : 'ü§ç';

        if (!name) {
            Utils.showNotification('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª–µ–∫—Ü—ñ—ó', 'warning');
            return;
        }

        try {
            await api.put(`/collections/${collectionId}`, { name, icon });
            Utils.showNotification('–ö–æ–ª–µ–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
            document.getElementById('edit-collection-modal').remove();
            app.render(); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º–æ –≤—Å—é —Å—Ç–æ—Ä—ñ–Ω–∫—É, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
        } catch (error) {
            Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è', 'error');
        }
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—é
     */
    async deleteCollection(collectionId, buttonElement) {
        const confirmed = await new Promise(resolve => {
            auth.showConfirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–æ–ª–µ–∫—Ü—ñ—é? –¢–æ–≤–∞—Ä–∏ –∑–∞–ª–∏—à–∞—Ç—å—Å—è, –∞–ª–µ –∫–æ–ª–µ–∫—Ü—ñ—è –∑–Ω–∏–∫–Ω–µ –Ω–∞–∑–∞–≤–∂–¥–∏.', resolve);
        });

        if (!confirmed) return;

        buttonElement.textContent = '–í–∏–¥–∞–ª–µ–Ω–Ω—è...';
        buttonElement.disabled = true;

        try {
            await api.delete(`/collections/${collectionId}`);
            Utils.showNotification('–ö–æ–ª–µ–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
            document.getElementById('edit-collection-modal').remove();
            app.render(); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º–æ –≤—Å—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
        } catch (error) {
            Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', 'error');
            buttonElement.textContent = '–í–∏–¥–∞–ª–∏—Ç–∏';
            buttonElement.disabled = false;
        }
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const collections = new CollectionsModule();
window.collections = collections;